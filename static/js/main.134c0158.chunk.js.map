{"version":3,"sources":["components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","employee","id","last_name","first_name","email","employeesDB","App","state","employees","handleInputChange","event","setState","target","value","this","sort","A","B","x","toLowerCase","y","onClick","sortByLastName","sortById","htmlFor","type","onChange","filter","toUpperCase","includes","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAaeA,EAXD,SAACC,GACb,OACE,4BACE,4BAAKA,EAAMC,SAASC,IACpB,4BAAKF,EAAMC,SAASE,WACpB,4BAAKH,EAAMC,SAASG,YACpB,4BAAKJ,EAAMC,SAASI,SCLpBC,G,MAAc,CAClB,CACEJ,GAAI,EACJE,WAAY,OACZD,UAAW,aACXE,MAAO,4BAET,CACEH,GAAI,EACJE,WAAY,OACZD,UAAW,OACXE,MAAO,kBAET,CACEH,GAAI,EACJE,WAAY,UACZD,UAAW,UACXE,MAAO,uBAET,CACEH,GAAI,EACJE,WAAY,SACZD,UAAW,SACXE,MAAO,0BAET,CACEH,GAAI,EACJE,WAAY,UACZD,UAAW,cACXE,MAAO,8BAET,CACEH,GAAI,EACJE,WAAY,QACZD,UAAW,WACXE,MAAO,uBAET,CACEH,GAAI,EACJE,WAAY,QACZD,UAAW,QACXE,MAAO,uBAET,CACEH,GAAI,EACJE,WAAY,UACZD,UAAW,YACXE,MAAO,+BAET,CACEH,GAAI,EACJE,WAAY,UACZD,UAAW,SACXE,MAAO,mCAET,CACEH,GAAI,GACJE,WAAY,eACZD,UAAW,YACXE,MAAO,wBA6FIE,E,4MAxFbC,MAAQ,CACNL,UAAW,GACXM,UAAW,I,EAEbC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAET,UAAWQ,EAAME,OAAOC,S,kEAGxCC,KAAKH,SAAS,CAAEH,UAAWH,M,uCAW3BS,KAAKH,SAAS,CACZH,UAAWM,KAAKP,MAAMC,UAAUO,MAAK,SAACC,EAAGC,GACvC,IAAIC,EAAIF,EAAEd,UAAUiB,cAChBC,EAAIH,EAAEf,UAAUiB,cACpB,OAAID,EAAIE,GACE,EAENF,EAAIE,EACC,EAEF,S,iCAOXN,KAAKH,SAAS,CACZH,UAAWM,KAAKP,MAAMC,UAAUO,MAAK,SAACC,EAAGC,GACvC,OAAOD,EAAEf,GAAKgB,EAAEhB,U,+BAKZ,IAAD,OACP,OACE,oCACE,6BACE,4BAAQoB,QAAS,kBAAM,EAAKC,mBAA5B,uBAIF,6BACE,4BAAQD,QAAS,kBAAM,EAAKE,aAA5B,wBAEF,8BACE,2BAAOC,QAAQ,UAAf,yBACA,2BACEC,KAAK,OACLZ,MAAOC,KAAKP,MAAML,UAClBwB,SAAUZ,KAAKL,qBAGnB,+BACE,+BACE,4BACE,kCACA,yCACA,0CACA,uCAGJ,+BACGK,KAAKP,MAAMC,UACTmB,QAAO,SAAC3B,GACP,OAAOA,EAASE,UACb0B,cACAC,SAAS,EAAKtB,MAAML,UAAU0B,kBAElCE,KAAI,SAAC9B,GAAD,OACH,kBAAC,EAAD,CAAO+B,IAAK/B,EAASC,GAAID,SAAUA,c,GAhFjCgC,aCtDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.134c0158.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Table = (props) => {\r\n  return (\r\n    <tr>\r\n      <td>{props.employee.id}</td>\r\n      <td>{props.employee.last_name}</td>\r\n      <td>{props.employee.first_name}</td>\r\n      <td>{props.employee.email}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\nimport Table from './components/Table';\nimport './App.css';\nconst employeesDB = [\n  {\n    id: 1,\n    first_name: 'Tore',\n    last_name: 'Birkenshaw',\n    email: 'tbirkenshaw0@twitter.com',\n  },\n  {\n    id: 2,\n    first_name: 'Skip',\n    last_name: 'Helm',\n    email: 'shelm1@bbb.org',\n  },\n  {\n    id: 3,\n    first_name: 'Wayland',\n    last_name: 'Hoopper',\n    email: 'whoopper2@prlog.org',\n  },\n  {\n    id: 4,\n    first_name: 'Sherry',\n    last_name: 'Maddie',\n    email: 'smaddie3@bloomberg.com',\n  },\n  {\n    id: 5,\n    first_name: 'Miranda',\n    last_name: 'Stallworthy',\n    email: 'mstallworthy4@mapquest.com',\n  },\n  {\n    id: 6,\n    first_name: 'Urban',\n    last_name: 'Bruntjen',\n    email: 'ubruntjen5@blog.com',\n  },\n  {\n    id: 7,\n    first_name: 'Lanie',\n    last_name: 'Gouly',\n    email: 'lgouly6@weather.com',\n  },\n  {\n    id: 8,\n    first_name: 'Myranda',\n    last_name: 'Coulthard',\n    email: 'mcoulthard7@studiopress.com',\n  },\n  {\n    id: 9,\n    first_name: 'Shelton',\n    last_name: 'Gounod',\n    email: 'sgounod8@nationalgeographic.com',\n  },\n  {\n    id: 10,\n    first_name: 'Maximilianus',\n    last_name: 'Chasemore',\n    email: 'mchasemore9@un.org',\n  },\n];\n\nclass App extends Component {\n  state = {\n    last_name: '',\n    employees: [],\n  };\n  handleInputChange = (event) => {\n    this.setState({ last_name: event.target.value });\n  };\n  componentDidMount() {\n    this.setState({ employees: employeesDB });\n  }\n\n  // cars.sort(function(a, b){\n  //   var x = a.type.toLowerCase();\n  //   var y = b.type.toLowerCase();\n  //   if (x < y) {return -1;}\n  //   if (x > y) {return 1;}\n  //   return 0;\n  // });\n  sortByLastName() {\n    this.setState({\n      employees: this.state.employees.sort((A, B) => {\n        let x = A.last_name.toLowerCase();\n        let y = B.last_name.toLowerCase();\n        if (x < y) {\n          return -1;\n        }\n        if (x > y) {\n          return 1;\n        }\n        return 0;\n      }),\n    });\n  }\n\n  // points.sort(function(a, b){return a - b});\n  sortById() {\n    this.setState({\n      employees: this.state.employees.sort((A, B) => {\n        return A.id - B.id;\n      }),\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div>\n          <button onClick={() => this.sortByLastName()}>\n            Sory Last Name A-Z\n          </button>\n        </div>\n        <div>\n          <button onClick={() => this.sortById()}>Sory By Id Low-High</button>\n        </div>\n        <form>\n          <label htmlFor='filter'>Search by Last Name: </label>\n          <input\n            type='text'\n            value={this.state.last_name}\n            onChange={this.handleInputChange}\n          />\n        </form>\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Last Name</th>\n              <th>First Name</th>\n              <th>Email</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees\n              .filter((employee) => {\n                return employee.last_name\n                  .toUpperCase()\n                  .includes(this.state.last_name.toUpperCase());\n              })\n              .map((employee) => (\n                <Table key={employee.id} employee={employee} />\n              ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}